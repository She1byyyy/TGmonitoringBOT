from telebot import types
import time
import threading
import json
import os
import requests
from health_status_checker.heatlh_status_checker import health_status_checker
from json_db.json_db import load_json, save_json

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å –¥–∞–Ω–Ω—ã–º–∏
USERS_FILE = "./health_status_bot/static/json-db/users.json"
CONSUMERS_FILE = "./health_status_bot/static/json-db/consumers.json"
EVENTS_FILE = "./health_status_bot/static/json-db/events.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
users = set()
subscribers = set()
stats_data = []
last_event_index = -1
server_checker = health_status_checker(host="localhost", port=8080)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def ping_server():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    ping_delay = server_checker.get_ping_delay()
    
    if ping_delay > 0:
        event = 'info'
        event_msg = '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ'
    else:
        event = 'alert'
        event_msg = '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º'
        ping_delay = None  # –ß—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å -1 –≤ –ª–æ–≥–∞—Ö
    
    stat = {
        'timestamp': int(time.time()),
        'ping_–∑–∞–¥–µ—Ä–∂–∫–∞': ping_delay,
        'event': event,
        'event_msg': event_msg
    }
    return stat

# –§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def stats_collector():
    """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    global stats_data
    while True:
        try:
            stat = ping_server()
            stats_data.append(stat)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è
            events_data = load_json(EVENTS_FILE)
            if not isinstance(events_data, list):
                events_data = []
                
            events_data.append(stat)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π, —á—Ç–æ–±—ã —Ñ–∞–π–ª –Ω–µ —Ä–æ—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
            if len(events_data) > 1000:
                events_data = events_data[-1000:]
                
            save_json(EVENTS_FILE, events_data)
            
            # –¢–∞–∫–∂–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä stats_data –≤ –ø–∞–º—è—Ç–∏
            if len(stats_data) > 1000:
                stats_data = stats_data[-1000:]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        time.sleep(5)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
def notify_subscribers(bot, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    consumers_data = load_json(CONSUMERS_FILE)
    subscribers_list = consumers_data.get('subscribers', [])
    
    for user_id in subscribers_list:
        try:
            bot.send_message(user_id, message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def check_and_notify(bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö"""
    global last_event_index, stats_data
    if len(stats_data) == 0:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ stats_data
    current_index = len(stats_data) - 1
    if last_event_index == current_index:
        return  # –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    new_events = stats_data[last_event_index+1:]
    
    # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è "alert" —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
    for event in new_events:
        if event['event'] == 'alert':
            ping_info = f"–ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞" if event['ping_–∑–∞–¥–µ—Ä–∂–∫–∞'] is None else f"–ó–∞–¥–µ—Ä–∂–∫–∞: {event['ping_–∑–∞–¥–µ—Ä–∂–∫–∞']:.2f} –º—Å"
            notify_subscribers(bot, f"‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! {event['event_msg']} ({ping_info})")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    last_event_index = current_index

# –§—É–Ω–∫—Ü–∏—è –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def notification_loop(bot):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    while True:
        try:
            check_and_notify(bot)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞"""
    global users, subscribers
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö
    users_data = load_json(USERS_FILE)
    consumers_data = load_json(CONSUMERS_FILE)
    subscribers = set(consumers_data.get('subscribers', []))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    threading.Thread(target=stats_collector, daemon=True).start()
    threading.Thread(target=notification_loop, args=(bot,), daemon=True).start()
    
    @bot.message_handler(commands=['start'])
    def start(message):
        user_id = str(message.from_user.id)
        users.add(user_id)
        
        if user_id not in users_data:
            users_data[user_id] = {'subscribed': False}
            save_json(USERS_FILE, users_data)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç
        inline_markup = types.InlineKeyboardMarkup()
        btn_site = types.InlineKeyboardButton(text='–ù–∞—à —Å–∞–π—Ç', url='https://www.google.com')
        inline_markup.add(btn_site)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [
            types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
            types.KeyboardButton('üîÑ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞'),
            types.KeyboardButton('üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'),
            types.KeyboardButton('üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è')
        ]
        reply_markup.add(buttons[0], buttons[1])
        reply_markup.add(buttons[2], buttons[3])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∞–Ω–¥–∞—Ö
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Health Status Bot!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üìå /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "üìå /subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞\n"
            "üìå /statistics - –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞\n"
            "üìå /get_status - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞\n"
            "üìå /unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞"
        )
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∫–æ–º–∞–Ω–¥
        bot.send_message(message.chat.id, welcome_text, reply_markup=reply_markup)
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç
        bot.send_message(
            message.chat.id, 
            '–ü–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç',
            reply_markup=inline_markup
        )
    
    @bot.message_handler(commands=['subscribe'])
    def subscribe(message):
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        if user_id not in users_data:
            users_data[user_id] = {'subscribed': False}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if users_data[user_id]['subscribed']:
            bot.reply_to(message, "‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞.")
            return
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_data[user_id]['subscribed'] = True
        save_json(USERS_FILE, users_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        if 'subscribers' not in consumers_data:
            consumers_data['subscribers'] = []
        
        if user_id not in consumers_data['subscribers']:
            consumers_data['subscribers'].append(user_id)
            save_json(CONSUMERS_FILE, consumers_data)
        
        subscribers.add(user_id)
        bot.reply_to(message, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞!")
    
    @bot.message_handler(commands=['unsubscribe'])
    def unsubscribe(message):
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –∏ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –æ–Ω
        if user_id not in users_data or not users_data[user_id]['subscribed']:
            bot.reply_to(message, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞.")
            return
        
        # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_data[user_id]['subscribed'] = False
        save_json(USERS_FILE, users_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        if 'subscribers' in consumers_data and user_id in consumers_data['subscribers']:
            consumers_data['subscribers'].remove(user_id)
            save_json(CONSUMERS_FILE, consumers_data)
        
        if user_id in subscribers:
            subscribers.remove(user_id)
        
        bot.reply_to(message, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞.")
    
    @bot.message_handler(commands=['get_status'])
    def get_status(message):
        try:
            ping_delay = server_checker.get_ping_delay()
            
            if ping_delay > 0:
                status_text = f"‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n–ó–∞–¥–µ—Ä–∂–∫–∞: {ping_delay:.2f} –º—Å"
            else:
                status_text = "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã"
            
            bot.reply_to(message, status_text)
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
    
    @bot.message_handler(commands=['statistics'])
    def statistics(message):
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ñ–∞–π–ª–∞
            events_data = load_json(EVENTS_FILE)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if not events_data:
                bot.reply_to(message, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
            last_records = events_data[-5:] if len(events_data) >= 5 else events_data
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_text = "üìä *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:*\n\n"
            
            for record in last_records:
                timestamp = time.strftime('%H:%M:%S', time.localtime(record['timestamp']))
                status = "‚úÖ" if record['event'] == 'info' else "‚ùå"
                
                if record['ping_–∑–∞–¥–µ—Ä–∂–∫–∞'] is not None:
                    delay = f"{record['ping_–∑–∞–¥–µ—Ä–∂–∫–∞']:.2f} –º—Å"
                else:
                    delay = "–ù/–î"
                
                stats_text += f"*{timestamp}* {status} {record['event_msg']} (–ó–∞–¥–µ—Ä–∂–∫–∞: {delay})\n"
            
            # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            total_records = len(events_data)
            info_records = sum(1 for record in events_data if record['event'] == 'info')
            availability = (info_records / total_records * 100) if total_records > 0 else 0
            
            stats_text += f"\n*–û–±—â–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:* {availability:.2f}%"
            stats_text += f"\n*–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫:* {total_records}"
            
            bot.reply_to(message, stats_text, parse_mode="Markdown")
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    @bot.message_handler(content_types=['text'])
    def handle_text(message):
        if message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            statistics(message)
        elif message.text == 'üîÑ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞':
            get_status(message)
        elif message.text == 'üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è':
            subscribe(message)
        elif message.text == 'üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è':
            unsubscribe(message)
    
    return users, subscribers
